python memo
-----------
dir(a)
help(str)

id(a)
type(a)

a is b
a == b
type(a) is type(b)

a=3+4j
b=3+4j
a is b  -> False
a == b  -> True

copy & reference
---
a=[1,2,3,4]
b = a                   -> reference
b = list(a)             -> copy or clone / shallow copy

import copy
b = copy.deepcopy(a)    -> deep copy


Coding
------
#!/usr/bin/env python
#-*-coding:UTF-8-*-

Sequence
-----
s[j]
s[i:j]
s[i:j:stride]
len(s)
min(s)
max(s)
sum(s [, initial])
all(s)           all item in s is True -> True
any(s)           any item in s is True -> True

s[j] = val
s[i:j] = val
s[i:j:stride] = val
del s[i]
del s[i:j]
del s[i:j:stride]

help
------
help('type')
help('str')
help('list')
help('id')


astr='123'
type(astr)
id(astr)
print(astr)


number
-------
abool=True

chr(65)
A
ord('A')
65

int(23.75)
int(True)
int(False)
int('12')

int('0100', 2)
int('0100', 10)
int('0100', 16)

10/2
5.0
10//2
5

if else
----------
astr='123455'
alist=list(astr)
aset=set(astr)
atuple=tuple(astr)

string
-------
f'{astr=}, {bstr=}'

astr='123'
bstr='1234'
astr==bstr
False
astr==bstr[:3]
True
id(astr)
id(bstr[:3])

Chapter 5
    while / for

NO count++
Only count+=1

list(range(1,10))

Chapter 6
    list / tuple

atuple='abc','def'
atuple[0]
atuple[1]
atuple[:2]
a,b=atuple

alist=[1,2,3]
aiist.append(4)
alist[-1]
alist[4]
len(alist)
alist.insert(10, 5)
alist.insert(0, 9)
alist.insert(-1, 100)

alist.extend(blist)

alist.remove('ab')
del alist[3]
alist.pop()
== alist.pop(-1)
alist.pop(0)

alist=[1,3,4,5,5]
aiist.index(5)
alist.count(5)

alist.sort(revers=True)
sorted(alist)



