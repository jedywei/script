webpack
--------
is a moduel bundler

index.js, app.js, data.js    => bundle.js

$ npm i -D webpack webpack-cli 
$ npm i -D webpack-dev-server 
$ npm i -D sass style-loader css-loader sass-loader
$ npm i -D html-webpack-plugin
$ npm i -D webpack-bundle-analyzer

// for babel
$ npm -i -D @babel/cli @babel/core @babel/preset-env
$ npm -i -D babel-loader


package.json ------------------------------------------------
"scripts" : {
    ...
    "build": "webpack",
    "report": "webpack --env report=true",
    "dev": "webpack serve" 
    ...
}

$ npm run build
$ npm run dev


webpack.config.js -----------------------------------------
const path = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin;

const conf = {
    mode: 'development',
    // mode: 'production',
    entry: {
        bundle: path.resolve(__dirname, '/src/index.js')
    },
    output: {
        path: path.resolve(__dirname, 'dist'),
        filename: '[name]-[contenthash].js',
        clean: true,
        assetModuleFilename: '[name][ext]'
    },
    devtool: 'source-map',
    devServer: {
        static: {
            directory: path.resolve(__dirname, 'dist')
        }, 
        port: 9000,
        open: { app: { name: "Google Chrome" } },
        hot: true,
        compress: true, 
        historyApiFallback: true
    },
    module: {
        rules: [
            {
                test:/\.scss$/,
                use: [ 'style-loader', 'css-loader', 'sass-loader', ]
            }, 
            {
                test:/\.js$/,
                exclude: /node_modules/,
                use: {
                    loader: 'babel-loader',
                    options: {
                        presets: ['@babel/preset-env']
                    }
                }
            },
            {
                test:/\.(png|svg|jpg|jpeg|gif)$/i,
                type: 'asset/resource'
            }
        ]
    },
    plugins: [
        new HtmlWebpackPlugin({
            title: '156-webpack5',
            filename: 'index.html',       
            template: 'src/template.html'
        })
    ]
};

module.exports = (env, argv) =>  {
    if (env.report)
        conf.plugins.push(new BundleAnalyzerPlugin());
    if (argv.mode === "production")
        conf.mode = 'production';
    return conf;
};
