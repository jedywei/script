yacc            Yet Another Compiler Compiler (gnu version bison)

bison [option]... file


YACC file format
%{
/* Global and header definitions required */
%}
/* Declarations (Optional token definitions) */
%%
/* Parsing ruleset definitions */
%%
/* Additional C source code */

----
Defining a number of tokens according to their precedence (low to high)
%nonassoc COLON
%token EQUALS POWER
%left GE LE EQ NE '>' '<'
%left '-' '+'
%left '*' '/' '%'
%right UMINUS
%right '!'

expr: '-' expr %prec UMINUS     { $$ = node (UMINUS, 1, $2);  }

----
y.tab.h

#ifndef YYSTYPE
#define YYSTYPE int
#endif
#define INTEGER 256
extern YYSTYPE yylval;

----
if define following
%union {
    int64_t     integer;        /* integer value */
    double      number;         /* double value */
    char        *string;        /* string value */
    void        *node;          /* next node */
};

%token <integer>    T_INTEGER
%token <number>     T_NUMBER;
%token <string>     T_STRING T_KEY T_REGEX
y.tab.h => 
typedef union {
    int64_t     integer;        /* integer value */
    double      number;         /* double value */
    char        *string;        /* string value */
    void        *node;          /* next node */
} YYSTYPE;
extern YYSTYPLE yylval;

----
%type <node> expr
%%
expr: T_INTEGER     { $$ = con($1);  }
=> 
                      yylval.node = con(yyvsp[0].integer);

----
Lex part
%{
#include <stdio.h>
#include "y.tab.h"
%}
%%
[0-9]+      yylval=atoi(yytext); return NUMBER;
heat        return TOKHEAT;
on|off      yylval=!strcmp(yytext, "on"); return STATE;
target      return TOKTARGET;
temperature return TOKTEMPERATURE;
\n          /* ignore end of line */
[ \t]+      /* ignore whitespace */
%%
----
YACC Part
%{
#include <stdio.h>
#include <string.h>
typedef char* string;
#define YYSTYPE string

%}
%token NUMBER TOKHEAT STATE TOKTARGET TOKTEMPERATURE
%%
commands: /* empty */
        | commands command
        ;

command :
        heat_switch
        | target_set
        ;

heat_switch:
        TOKHEAT STAT
        {
            printf("\tHeat turned on or off\n");
        }
        ;

target_set:
        TOKTARGET TOKTEMPERATURE NUMBER
        {
            printf("\tTemperature set\n");
        }
        ;
%%
void yyerror(const char *str)
{
    fprintf(stderr, "error: %s\n", str);
}
int yywrap()
{
    return 1;
}
main()
{
    yyparse();
}
-------------

A Calculator Example

4+5
(4+5)*6
2^3/6
sing(1)+cos(PI)

--
Lex
%{
#define YYSTYPE double
#include "calcparse.tab.h"
#include <math.h>
extern double yylval;
%}

D   0-9.
[ \t]   { ; }
log     return LOG;
pi      return PIVAL;
sin     return SIN;
cos     return COS;
tan     return TAN;
and     return AND;

---------
YACC

%{
#include <alloca.h>
#include <math.h>
#include <stdlib.h>
#include <stddef.h>
#include <ctype.h>
#define YYSTYPE double
double calcfact();
double reg[99];
double ans;
char format[20];
%}

%token NUMBER SPACE MOD RIGHTSHIFT LEFTSHIFT SEMICOLON SIN EOLN PIVAL
%token PLUS MINUS DIV MUL POW OPENBRACKET CLOSEBARCKET UNARYMINUS

%%
add_expr: mul_expr
        | add_expr PLUS mul_expr        { $$ = $1 + $3; }
        | add_expr MINUS mul_expr       { $$ = $1 - $3; }
        ;
mul_expr: primary
        | mul_expr MUL primary          { $$ = $1 * $3; }
        | mul_expr DIV primary          { $$ = $1 / $3; }
        ;
primary : NUMBER                        { $$ = $1; }
        ;

assign_expr: postfix_expr
        | REGA OPENREG expr CLOSEREG ASSIGN postfix_expr
                                        { reg[(int)$3] = $6; $$=$6; }
        | REGA OPENREG expr CLOSEREG    { $$ = reg[(int)$3];  }
        | REGA                          { int i;
                                          for (i = 0; i< 100; i++)
                                            if (reg[i] != 0)
                                                printf("%02d = %.2f\n", i, reg[i]);
                                          $$ = 0;
                                         }
        ;



---------------
Simple lex/yacc Makefile

YFLAGS  = -d
PROGRAM = calc
OBJS    = calcparse.tab.o lex.yy.o fmath.o const.o
SRCS    = calcparse.tab.c lex.yy.c fmath.c const.c
CC      = gcc
all:    $(PROGRAM)
.c.o:   $(SRCS)
        $(CC) -c $*.c -o $@ -O

