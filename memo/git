# Initially set up any Git Server
#----------------------------------------------------------
cd ~/git
mkdir test.git
cd test.git
git init --bare --shared

# Initial local git 
cd <project>
git init

# setup remote git link 
# to my mac
git remote add origin ssh://jedywei@mac/Users/jedywei/Git/<project>.git
# to githup
git remote add origin https://jedywei:71susislove@github.com/jedywei/projs.git


# check remote by
git remote -v 

# set master default upstream 
git push --set-upstream origin master

#
# Clone a test.git repostory to your local
#----------------------------------------------------------
git clone ssh://jedywei:ok@mac/Users/jedywei/git/test.git

# for mediaflow project
git svn clone https://batman.advantech.com.tw/svn/scm/ncg/mediaflow/branches/Boreas
# user: jedy.wei
# password: 71Susislove

svn ls https://172.20.2.44/svn/pacific/projects/VEGA3311
svn ls https://172.20.2.44/svn/pacific/projects/VEGA3311/other/pxxc

# for pxxc project
git svn clone https://172.20.2.44/svn/pacific/projects/VEGA3311/other/pxxc
# user: Jedy.Wei@advantch.com.tw
# password: 71Susislove

git svn rebase
git svn dcommit


# Create remote branch by local branch
#-----------------------------------------------------------
git br hotdog   // local branch
git co hotdog   // checkout local branch
git push -u origin hotdog   // create origin/hotdog and push

# Clone local branch by remove branch
#-----------------------------------------------------------
git br -r       // browse remote branch
git co origin/hotdog -b hotdog // create local hotdog by remote

# Remove remote branch
#----------------------------------------------------------
git push origin --delete hotdog

# Update all repository branch
#----------------------------------------------------------
git remote update

git remote set-url origin ssh://jedywei@mac/Users/jedywei/Git/bet.git

# Create new branch 
#----------------------------------------------------------
# create new branch on local
git co -b bagel

# push local branch to remote and add a new branch
git push -u origin bagel

# pull remote to local
git pull

# check out new branch
git co bagel

# List branch, remote and all
#----------------------------------------------------------
git br
git br -r
git br -a 

# List branch and upstream binding
#---------------------------------------------------------
git br -vv

# push all branch to remote
#---------------------------------------------------------
git push origin --all

# fetch all branch from remote
#---------------------------------------------------------
git fetch --all

# pull all branch from remote. 
# NOTE: pull will fetch and then merge 
#--------------------------------------------------------
git pull -all


# push tag to remote site
#---------------------------------------------------------
git push --tags
git push origin <tag_name>

#rebase and merge
#----------------------------------------------------------
git rebase          // 不要對你的 repo 外有副本的 Branch 執行 rebase 
git merge           // rebase 比 merge 好在重整成線性的commited history 


~/.gitignore
~/.gitconfig
~/.git-completion.bash

# Working directory
#---------------------------------------------------------------------
WD - working directory /  (untracked files, or changes not staged for commit)
Stage - staging area (changed to be committed)
Repo - repository (commited)

WD      -> Stage    git add
Stage   -> Repo     git commit
Stage   -> WD       git reset / git rm --cached  
Repo    -> WD       git checkout
Repo    -> Nothing  git reset --hard HEAD~5    (5 older than HEAD)
Repo    -> Stage    git reset --soft HEAD^     (== git commit --amend) 
Repo    -> WD       git reset --mixed HEAD^

--mixed     the committed files will put back to WD
--soft      the committed files put back to Stage
--hard      the committed files throw away



# diff
#---------------------------------------------------------------------
HEAD~n, HEAD^, HEAD, Stage, WD

git diff --cached HEAD^     (HEAD^, Stage)
git diff --cached HEAD      (HEAD, Stage)
git diff --cached           == git diff cached HEAD
git diff                    (Stage, WD)
git diff head               (HEAD, WD)
git diff head^              (HEAD^, WD)
git diff HEAD HEAD~5        (HEAD, HEAD~5)


