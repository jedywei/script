git             the stupid content tracker

git <command> [<args>]


# Initially set up any Git Server
#----------------------------------------------------------
cd ~/git
mkdir test.git
cd test.git
git init --bare --shared

# Initial local git 
cd <project>
git init

# setup remote git link 
# to my mac
git remote add <shortname> <url>
$ git remote add origin ssh://jedywei@mac/Users/jedywei/Git/<project>.git
$ git remote add jedy ssh://jedywei@192.168.0.208/home/jedywei/mediaflow/Boreas
# to githup
git remote add origin https://jedywei:71susislove@github.com/jedywei/projs.git


# check remote by
git remote -v 

# fetch remote
git fetch <remote>

# set master default upstream 
git push <remote> <branch>
git push --set-upstream origin master


#
# Clone a test.git repostory to your local
#----------------------------------------------------------
git clone ssh://jedywei:ok@mac/Users/jedywei/git/test.git

# for mediaflow project
git svn clone https://batman.advantech.com.tw/svn/scm/ncg/mediaflow/branches/Boreas
# user: jedy.wei
# password: 71Susislove   <---XXXXX
# password: fybsy4-tymxyw-tEvciz    (2021/07/04)

svn ls https://172.20.2.44/svn/pacific/projects/VEGA3311
svn ls https://172.20.2.44/svn/pacific/projects/VEGA3311/other/pxxc

# for pxxc project
git svn clone https://172.20.2.44/svn/pacific/projects/VEGA3311/other/pxxc
# user: Jedy.Wei@advantch.com.tw
# password: 71Susislove

git svn rebase
git svn dcommit


# Create remote branch by local branch
#-----------------------------------------------------------
git br hotdog   // local branch
git co hotdog   // checkout local branch
git push -u origin hotdog   // create origin/hotdog and push

# Clone local branch by remove branch
#-----------------------------------------------------------
git br -r       // browse remote branch
git co origin/hotdog -b hotdog // create local hotdog by remote

# Remove remote branch
#----------------------------------------------------------
git push origin --delete hotdog

# Update all repository branch
#----------------------------------------------------------
git remote update

git remote set-url origin ssh://jedywei@mac/Users/jedywei/Git/bet.git

# Create new branch 
#----------------------------------------------------------
# create new branch on local
git co -b bagel

# push local branch to remote and add a new branch
git push -u origin bagel

# pull remote to local
git pull

# check out new branch
git co bagel

# List branch, remote and all
#----------------------------------------------------------
git br
git br -r
git br -a 
git br -d <branch>
git br -D <branch>

# List branch and upstream binding
#---------------------------------------------------------
git br -vv

# switch branch
#---------------------------------------------------------
git co <branch>
git co -b <new branch>

# merge or rebase branch 
#---------------------------------------------------------
git merge <commit>
git merge <branch>
git rebase <branch>

Garbage collection
-------------------
git gc --prune=now


track remote branch
--------------------
# 1
git co -b sf origin/serverfix
# 2
git co sf
git br -u origin/serverfix

remove remote branch
----------------------
$ git push jedy --delete jedy/json-c-0-15       // both
$ git br -rd jedy/json-c-0-15                   // delete only local

# push all branch to remote
#---------------------------------------------------------
git push origin --all

# fetch all branch from remote
#---------------------------------------------------------
git fetch --all

# pull all branch from remote. 
# NOTE: pull will fetch and then merge 
#--------------------------------------------------------
git pull -all


# push tag to remote site
#---------------------------------------------------------
git push --tags
git push origin <tag_name>

#rebase and merge
#----------------------------------------------------------
git rebase          // 不要對你的 repo 外有副本的 Branch 執行 rebase 
$ git co a_branch
$ git rebase master

git merge           // rebase 比 merge 好在重整成線性的commited history 
$ git co master
$ git merge a_branch

~/.gitignore
~/.gitconfig
~/.git-completion.bash

# Working directory
#---------------------------------------------------------------------
WD - working directory /  (untracked files, or changes not staged for commit)
Stage - staging area (changed to be committed)
Repo - repository (commited)

WD      -> Stage    git add
Stage   -> Repo     git commit
Stage   -> WD       git reset / git rm --cached  
Repo    -> WD       git checkout
Repo    -> Nothing  git reset --hard HEAD~5    (5 older than HEAD)
Repo    -> Stage    git reset --soft HEAD^     (== git commit --amend) 
Repo    -> WD       git reset -- HEAD^         (== git reset --mixed HEAD^ )

--          the committed files will put back to WD (it's same as --mixed, but --mixed option id deprecated)
                HEAD / Stage  / WD (NC)
--soft      the committed files put back to Stage
                HEAD / Stage (NC) / WD (NC)
--hard      the committed files throw away
                HEAD / Stage / WD


git uncommit        == reset HEAD~                  => 
git undo            == reset --soft HEAD^
git unstage         == reset HEAD --



# amend
#---------------------------------------------------------------------
git ci --amend -m "amend message"
git cia -m "amend message"
git amend -m "amend message"


# diff
#---------------------------------------------------------------------
HEAD~n, HEAD^, HEAD, Stage, WD

git diff --cached HEAD^     (HEAD^, Stage)
git diff --cached HEAD      (HEAD, Stage)
git diff --cached           == git diff cached HEAD
git diff                    (Stage, WD)
git diff head               (HEAD, WD)
git diff head^              (HEAD^, WD)
git diff HEAD HEAD~5        (HEAD, HEAD~5)
git diff --staged           (stage, HEAD)

see also git-format-patch, git-diff

# format-patch
#---------------------------------------------------------------------
git format-patch -o ~/patches git-svn
git format-patch -o ~/patches git-svn..442684d

git apply --check 001-Fix-cli-showvminfo.patch
git apply 001-Fix-cli-showvminfo.patch


# check ignore files or directories
#---------------------------------------------------------------------
git status --ignored                                // will display all ignored from .git location
git clean -ndX                                      // ** will dispaly real ignored files
git check-ignore -v *                               // will display files in current directory was ignored
git check-ignore -v $(find . -type f -print)        // will display all files under current directory was ignored

git add -f ignored-file

# clean empty directory
#----------------------------------------------------------------------
git clean -f -d
git help clean
    -n, --dry-run       - don't actually remove anything, just show what would be done
    -d                  - remove untracked directries in addition to untracked files
    -X                  - remove only files ignored by git
    -f, --force         - force the action

# list tracked files
#----------------------------------------------------------------------
git ls-files

# debug ignore
#----------------------------------------------------------------------
git check-ignore -v <path>

# git tag
#----------------------------------------------------------------------
git tag big_cats 51d54ff
git tag big_cats 51d54ff -a -m "Big Cats are comming"
git tag -d big_cats


# git <start point> <since> <branch> <commit> <remote_name> <tag>
#----------------------------------------------------------------------
HEAD / HEAD^ / HEAD~n / head / head^ / head~n           <start point>
8a21b99 / 8a21b997dc1b0ef50b2361c02431f8763bb55ceb      <commit>
json-c-0-15 / master                                    <branch>
git-svn / origin/master / origin/HEAD                   <remote_name>
--since="2020-11-01"                                    <since>
--before="2020-11-01"
--after="2020-11-01"
--since="1 month ago"
--since="10 minutes ago"
--since="9am"

# git <revision_range>
#---------------------------------------------------------------------
git log --oneline master..git-svn



# git rev-parse, reflog, git show <revison>


Trouble Shooting
==================================================================================

issue  (gnome-ssh-askpass:32737): Gtk-WARNING **: cannot open display: error:
$ cat /etc/profile.d/gnome-ssh-askpass.sh
SSH_ASKPASS=/usr/libexec/openssh/gnome-ssh-askpass
$ unset SSH_ASKPASS

issue fatal: in unpopulated submodule [angulartest]
$ git rm --cached angulartest -f

ISSUE: batman VS git-svn 
>>>>>>>>>>>>>>>>>>>
running context: An error occurred during SSL communication ...
$ openssl version -d
OPENSSLDIR: "/etc/pki/tls"
$ sudo vi /etc/pki/tls/openssl.cnf
...
[ default_conf ]

ssl_conf = ssl_sect

[ssl_sect]

system_default = ssl_default_sect

[ssl_default_sect]
# after .include .....
MinProtocol = TLSv1
CipherString = DEFAULT@SECLEVEL=1
<<<<<<<<<<<<<<<<<<
